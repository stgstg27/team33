# -*- coding: utf-8 -*-
"""
Created on Sat Jan 20 20:57:01 2018

@author: Saurabh
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.image as mpimg

import numpy as np
import bisect
from numba import jit

def imadjust(src, tol=1, vin=[0,255], vout=(0,255)):
    # src : input one-layer image (numpy array)
    # tol : tolerance, from 0 to 100.
    # vin  : src image bounds
    # vout : dst image bounds
    # return : output img

    assert len(src.shape) == 2 ,'Input image should be 2-dims'

    tol = max(0, min(100, tol))

    if tol > 0:
        # Compute in and out limits
        # Histogram
        hist = np.histogram(src,bins=list(range(256)),range=(0,255))[0]

        # Cumulative histogram
        cum = hist.copy()
        for i in range(1, 256): cum[i] = cum[i - 1] + hist[i]

        # Compute bounds
        total = src.shape[0] * src.shape[1]
        low_bound = total * tol / 100
        upp_bound = total * (100 - tol) / 100
        vin[0] = bisect.bisect_left(cum, low_bound)
        vin[1] = bisect.bisect_left(cum, upp_bound)

    # Stretching
    scale = (vout[1] - vout[0]) / (vin[1] - vin[0])
    vs = src-vin[0]
    vs[src<vin[0]]=0
    vd = vs*scale+0.5 + vout[0]
    vd[vd>vout[1]] = vout[1]
    dst = vd

    return dst

def bubbleSort(alist):
    for passnum in range(len(alist)-1,0,-1):
        for i in range(passnum):
            if cv2.contourArea(alist[i])>cv2.contourArea(alist[i+1]):
                temp = alist[i]
                alist[i] = alist[i+1]
                alist[i+1] = temp
    return alist
def draw_circle(event,x,y,flags,param):
    
    if event == cv2.EVENT_LBUTTONDBLCLK:
        cv2.circle(img,(x,y),100,(255,0,0),-1)
        mouseX,mouseY = x,y
        print mouseX,mouseY
        return int(x),int(y)
 
mouseX = 0
mouseY = 0       
imgg = mpimg.imread('vibhu2.jpg')


def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])

img = cv2.imread('vibhu2.jpg')
x = len(img[0])
y = len(img)
print x," ",y

imx = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.namedWindow('imax',cv2.WINDOW_NORMAL)
cv2.namedWindow('imax')
cv2.imshow('imax',imx)
cv2.setMouseCallback('imax',draw_circle)

cordx,cordy = mouseX,mouseY
cv2.resizeWindow('imax',200,200)
imx2 = imx[cordx-100:cordx+100,cordy-100:cordy+100]

#imx = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.namedWindow('image',cv2.WINDOW_NORMAL)
cv2.imshow('image',imx)
cv2.resizeWindow('image',200,200)

#adj_image = imadjust(imx)
#cv2.namedWindow('imadjust',cv2.WINDOW_NORMAL)
#cv2.imshow('imadjust',imx)
#cv2.resizeWindow('imadjust',200,200)
kernel = np.ones((1,1),dtype='uint8')

dilation = cv2.dilate(imx,kernel,iterations = 5)
cv2.namedWindow('opening',cv2.WINDOW_NORMAL)
cv2.imshow('opening',dilation)
cv2.resizeWindow('opening',200,200)

th3 = cv2.adaptiveThreshold(dilation,255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
        cv2.THRESH_BINARY,3,0)
ret3,otu = cv2.threshold(imx,0,255,cv2.THRESH_OTSU)
cv2.namedWindow('adt',cv2.WINDOW_NORMAL)
cv2.imshow('adt',img)
cv2.resizeWindow('adt',200,200)
contours,hierarchy = cv2.findContours(imx,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)


cv2.namedWindow('otu',cv2.WINDOW_NORMAL)
cv2.imshow('otu',otu)
cv2.resizeWindow('otu',200,200)


cv2.waitKey(0)
cv2.destroyAllWindows()

#img = cv2.imread('messi5.jpg',0)
img2 = rgb2gray(imgg)
plt.imshow(img2,cmap = plt.get_cmap('gray'))
#plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()
